import requests
import math
import networkx as nx
import matplotlib.pyplot as plt
import heapq
import time
import webbrowser

# Define your API key and endpoint
api_key = 'YOUR_API_KEY'
endpoint = 'YOUR_API_ENDPOINT_URL'


# Define the parameters for the request
latitude = 0.0  # Replace with the specific latitude value (e.g., 37.7749 for San Francisco)
longitude = 0.0  # Replace with the specific longitude value (e.g., -122.4194 for San Francisco)
radius = 1000  # Radius in meters (e.g., 1000 meters = 1 km)


# Define the location as a string
location = f'{latitude},{longitude}'

# Function to fetch places within the radius
def fetch_places(api_key, location, radius):
    params = {
        'location': location,
        'radius': radius,
        'key': api_key
    }
    response = requests.get(endpoint, params=params)
    return response.json().get('results', [])

# Fetch places
places = fetch_places(api_key, location, radius)

# Print details of the places
print("Places fetched from Google Places API:")
for idx, place in enumerate(places):
    place_name = place.get('name', 'N/A')
    place_lat = place['geometry']['location']['lat']
    place_lon = place['geometry']['location']['lng']
    print(f"Place {idx + 2}: {place_name}, Latitude: {place_lat}, Longitude: {place_lon}")

# Function to calculate Haversine distance between two points
def haversine(lat1, lon1, lat2, lon2):
    R = 6371000  # Radius of Earth in meters
    phi1 = math.radians(lat1)
    phi2 = math.radians(lat2)
    delta_phi = math.radians(lat2 - lat1)
    delta_lambda = math.radians(lon2 - lon1)
    a = math.sin(delta_phi / 2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(delta_lambda / 2) ** 2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    return R * c

# Create a graph and add the starting point
G = nx.Graph()
G.add_node(1, pos=(latitude, longitude), name='Hubli')

# Add places as nodes and edges to the graph
for idx, place in enumerate(places, start=2):
    lat = place['geometry']['location']['lat']
    lon = place['geometry']['location']['lng']
    place_name = place.get('name', 'N/A')
    G.add_node(idx, pos=(lat, lon), name=place_name)
    for node in G.nodes:
        if node != idx:
            lat1, lon1 = G.nodes[node]['pos']
            lat2, lon2 = G.nodes[idx]['pos']
            distance = haversine(lat1, lon1, lat2, lon2)
            if distance <= radius:
                G.add_edge(node, idx, weight=distance)

# Display the graph
pos = nx.get_node_attributes(G, 'pos')
nx.draw(G, pos, with_labels=True, node_size=500, node_color='lightblue', font_size=8, font_weight='bold')
plt.show()

# Manually specify the start and goal nodes
start_node =  # Replace with the correct start node
goal_node =   # Replace with the correct goal node

# Specify the start and goal nodes
#start_node = int(input("Enter the start node (as an integer): "))
#goal_node = int(input("Enter the goal node (as an integer): "))
 

# Ensure start_node and goal_node exist in the graph
if start_node not in G.nodes or goal_node not in G.nodes:
    raise ValueError(f"Start node {start_node} or goal node {goal_node} does not exist in the graph.")

# Function for A* algorithm
def astar(graph, start, goal):
    # Heuristic function for A* (Haversine distance)
    def heuristic(u, v):
        pos_u = graph.nodes[u]['pos']
        pos_v = graph.nodes[v]['pos']
        return haversine(*pos_u, *pos_v)

    # Initialize data structures
    open_list = [(0, start)]  # Priority queue of (f-value, node)
    closed_set = set()  # Set of visited nodes
    g_values = {node: float('inf') for node in graph.nodes}  # Dictionary to store g-values (actual cost)
    g_values[start] = 0  # Start node has g-value of 0
    parent_nodes = {}  # Dictionary to store parent nodes for path reconstruction

    # A* algorithm loop
    while open_list:
        _, current_node = heapq.heappop(open_list)  # Get node with lowest f-value
        if current_node == goal:
            # Goal reached, reconstruct and return path
            path = [current_node]
            while current_node in parent_nodes:
                current_node = parent_nodes[current_node]
                path.append(current_node)
            return path[::-1]  # Reverse path to get correct order
        closed_set.add(current_node)  # Mark node as visited
        for neighbor in graph.neighbors(current_node):
            if neighbor in closed_set:
                continue  # Skip visited nodes
            # Calculate tentative g-value (actual cost)
            tentative_g = g_values[current_node] + graph[current_node][neighbor]['weight']
            if tentative_g < g_values[neighbor]:
                # Update g-value and f-value, and record parent node
                g_values[neighbor] = tentative_g
                f_value = tentative_g + heuristic(neighbor, goal)
                heapq.heappush(open_list, (f_value, neighbor))
                parent_nodes[neighbor] = current_node

    # No path found
    return None

# Perform A* algorithm
start_time = time.time()
shortest_path = astar(G, start_node, goal_node)
execution_time = time.time() - start_time




# Print shortest distances to all nodes from the start node
print("\nShortest distances from node", start_node)
for node, distance in shortest_distances.items():
    print("To node", node, ":", distance)

# Output the shortest path and its distance
shortest_distance_to_goal = shortest_distances[goal_node]
print(f"\nShortest distance from node {start_node} to node {goal_node}: {shortest_distance_to_goal:.2f} meters")
print(f"Time taken: {execution_time:.6f} seconds")


# Recalculate the shortest path
shortest_path = nx.shortest_path(G, source=start_node, target=goal_node, weight='weight')
# Displaying the intermediate nodes in the shortest path
print("Nodes in the shortest path:")
for node in shortest_path:
    print("Node:", node)

shortest_path_edges = [(shortest_path[i], shortest_path[i+1]) for i in range(len(shortest_path)-1)]



pos = nx.spring_layout(G, scale=2.5)


# Draw edges
nx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5, edge_color='gray')
nx.draw_networkx_edges(G, pos, edgelist=shortest_path_edges, width=2.0, edge_color='red')


# Draw labels
nx.draw_networkx_labels(G, pos, font_size=10, font_family='sans-serif')

plt.title("Shortest Path with Highlighted Edges")
plt.axis('off')
plt.show()





# Generate Google Maps URL for the path
def generate_google_maps_url(path, graph):
    base_url = "https://www.google.com/maps/dir/"
    waypoints = []
    for node in path:
        lat, lon = graph.nodes[node]['pos']
        waypoints.append(f"{lat},{lon}")
    return base_url + "/".join(waypoints)

# Create the URL and open it in a web browser
google_maps_url = generate_google_maps_url(path, G)
print("\nGoogle Maps URL:", google_maps_url)
webbrowser.open(google_maps_url)  
